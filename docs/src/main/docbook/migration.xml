<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2014 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    http://glassfish.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<!DOCTYPE chapter [<!ENTITY % ents SYSTEM "jersey.ent" > %ents;]>
<chapter xmlns="http://docbook.org/ns/docbook"
         version="5.0"
         xml:lang="en"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd"
         xml:id="migration">
    <title>Migration Guide</title>

    <section xml:id="mig-2.8">
        <title>Migrating from Jersey 2.6 to 2.7</title>

        <section xml:id="mig-2.8-breaking-changes">
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            Deprecated <literal>getDestroyTime</literal> method has been removed from
                            &jersey.server.monitoring.ApplicationStatistics;. To get the application shutdown information,
                            a &jersey.server.ContainerLifecycleListener; should be registered and its
                            <literal>onShutdown</literal> method implemented to listen to and process the application
                            shutdown event.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Method <literal>triggerEvent(RequestEvent.Type)</literal> has been removed from the public
                            &jersey.server.ContainerRequest; API. This method has never been intended for public,
                            application-level use.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </section>
    <section xml:id="mig-2.7">
        <title>Migrating from Jersey 2.6 to 2.7</title>

        <section xml:id="mig-2.7-breaking-changes">
            <title>Changes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            Until version 2.6, Jersey was compiled with Java SE 6. This has changes in Jersey 2.7.
                            Now almost all Jersey components are compiled with Java SE 7 target. It means, that you will need at least Java
                            SE 7 to be able to compile and run your application that is using latest Jersey.
                            Only <literal>core-common</literal> and <literal>core-client</literal> modules are still compiled with Java class
                            version runnable with Java SE 6.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            MVC support: method <literal>writeTo</literal> of &jersey.server.mvc.TemplateProcessor;
                            was modified by adding an argument <literal>MultivaluedMap&lt;String, Object&gt; httpHeaders</literal>.
                            This is an incompatible change (the method was modified directly in the interface). All
                            Jersey provided MVC implementation were adjusted but if you have your own MVC implementation
                            then you need to modify the method signature of the implementation.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            A minor JAX-RS incompatibility issue has been recently discovered and reported
                            (see <link xlink:href="https://java.net/jira/browse/JERSEY-2387">JERSEY-2387</link>). As part of the
                            fix, minor breaking changes related to URI resolving and creation have been introduced in the
                            behavior of &jaxrs.core.UriBuilder;, &jaxrs.core.Link.Builder; and &jaxrs.client.WebTarget; classes.
                            It is no longer possible to successfully build a new &lit.jdk6.URI; instance from a
                            &lit.jaxrs.core.UriBuilder; that contains unresolved template parameters.
                            An <literal>IllegalArgumentException</literal> will be thrown in such case, as mandated by
                            JAX-RS API javadoc. Similarly, it is not possible to successfully create a &jaxrs.core.Link;
                            instance from a URI template with unresolved template parameters.
                            Also, it is not possible to successfully send a request on a &lit.jaxrs.client.WebTarget; that
                            represents a URI template that does not have all the template parameters properly resolved.
                            Any attempt to do so will fail with an exception. Note that this also applies to any managed clients
                            injected into JAX-RS server-side components using &jersey.server.Uri; annotation.
                        </para>
                        <para>
                            In Jersey 2.6 and earlier, producing a URI from an incompletely resolved URI template would succeed
                            and all unresolved template parameter locations would be encoded without change into the resulting
                            URI, for example <literal>"/path/{param}"</literal> would be implicitly encoded as
                            <literal>"/path/%7Bparam%7D"</literal>. While we do not expect our users to depend on this
                            functionality, if the former behavior is desired for some reason,
                            <literal>UriComponent.encodeTemplateNames</literal> method can be used instead:

                            <programlisting language="java" linenumbering="unnumbered">URI.create(UriComponent.encodeTemplateNames(UriBuilder.fromUri("/path/{param}").toTemplate()));</programlisting>

                            or simply

                            <programlisting language="java" linenumbering="unnumbered">URI.create(UriComponent.encodeTemplateNames("/path/{param}"));</programlisting>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </section>
    <section xml:id="mig-2.6">
        <title>Migrating from Jersey 2.5.1 to 2.6</title>

        <section xml:id="mig-2.6-repackaged">
            <title>Guava and ASM have been embedded</title>
            <para>
                Jersey no longer depend directly on Guava and ASM artifacts which means that users are free to use their own
                versions of mentioned libraries.
            </para>
            <para>
                New bundle has been created for Guava (<literal>bundles/repackaged/jersey-guava</literal>), with Maven coordinates:
                <literal>org.glassfish.jersey.bundles.repackaged:jersey-guava</literal>
            </para>
            <para>
                (Repackaged) ASM is now part of Jersey Server. Jersey currently uses ASM 5 for package-scanning capabilities.
            </para>
        </section>
        <section xml:id="mig-2.6-new-deprecated">
            <title>New deprecated APIs / internal classes</title>
            <para>Following APIs were deprecated:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <literal>org.glassfish.jersey.message.internal.HttpDateFormat</literal> - method
                            <literal>getPreferedDateFormat()</literal> has been marked as deprecated due to typo in the name. New
                            method <literal>getPreferredDateFormat()</literal> should be used instead.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section xml:id="mig-2.6-removed-deprecated">
            <title>Removed deprecated APIs</title>
            <para>Following, already deprecated, APIs were removed:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <literal>org.glassfish.jersey.client.filter.HttpBasicAuthFilter</literal>
                            and <literal>org.glassfish.jersey.client.filter.HttpDigestAuthFilter</literal>
                            (use &jersey.client.HttpAuthenticationFeature; instead)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>org.glassfish.jersey.apache.connector.ApacheClientProperties.HTTP_PARAMS</literal>
                            (use <literal>org.glassfish.jersey.apache.connector.ApacheClientProperties#REQUEST_CONFIG</literal> instead),
                            <literal>org.glassfish.jersey.apache.connector.ApacheClientProperties.PROXY_URI</literal>,
                            <literal>org.glassfish.jersey.apache.connector.ApacheClientProperties.PROXY_USERNAME</literal>,
                            <literal>org.glassfish.jersey.apache.connector.ApacheClientProperties.PROXY_PASSWORD</literal>
                            (use corresponding &jersey.client.ClientProperties; instead.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>org.glassfish.jersey.server.validation.ValidationConfig.setMessageInterpolator</literal>
                            <literal>org.glassfish.jersey.server.validation.ValidationConfig.setTraversableResolver</literal>
                            <literal>org.glassfish.jersey.server.validation.ValidationConfig.setConstraintValidatorFactory</literal>
                            <literal>org.glassfish.jersey.server.validation.ValidationConfig.setParameterNameProvider</literal>
                            (use corresponding methods of the same class without <literal>"set"</literal> prefix in the method names).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>org.glassfish.jersey.server.mvc.MvcProperties</literal>
                            (use properties of <literal>org.glassfish.jersey.server.mvc.MvcFeature</literal> instead).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            MVC does not allow to specify the resolving class. Resolving class is used to create a path of the
                            template. Changes are:
                        </para>
                        <para>
                            Annotation attribute <literal>Class&lt;?&gt; org.glassfish.jersey.server.mvc.Template.resolvingClass()</literal>
                            (the attribute was obsolete and therefore removed. Resolving class now always the resource
                            class in which the MVC resource method is defined).
                        </para>
                        <para>
                            <literal>resolvingClass</literal> was removed from &jersey.server.mvc.Viewable;. The constructor
                            no longer accepts this argument and there is no getter for this field.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>org.glassfish.jersey.server.mvc.freemarker.FreemarkerProperties</literal> (use
                            &jersey.server.mvc.FreemarkerMvcFeature; instead)
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            <literal>org.glassfish.jersey.server.mvc.jsp.JspProperties</literal>
                            (use &jersey.server.mvc.JspMvcFeature; instead)
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            <literal>org.glassfish.jersey.server.model.RuntimeResource.getFirstParentResource()</literal>
                            (use &jersey.server.Resource.getParent; instead).
                        </para>
                    </listitem>

                </itemizedlist>
            </para>
        </section>
        <para>
            <itemizedlist>
                <listitem><para>
                    WADL is by default displayed in the simplified form. It does not contain supporting resources
                    like OPTIONS methods or <literal>/application.wadl</literal> itself. In order to get the
                    full WADL use query param <literal>detail=true</literal>. For example make a GET request
                    to <literal>http://localhost:8080/application.wadl?detail=true</literal>.
                </para></listitem>
            </itemizedlist>
        </para>
    </section>


    <section xml:id="mig-2.5.1">
        <title>Migrating from Jersey 2.5 to 2.5.1</title>

        <para>
            <itemizedlist>
                <listitem><para>
                    WADL is by default displayed in the simplified form. It does not contain supporting resources
                    like OPTIONS methods or <literal>/application.wadl</literal> itself. In order to get the
                    full WADL use query param <literal>detail=true</literal>. For example make a GET request
                    to <literal>http://localhost:8080/application.wadl?detail=true</literal>.
                </para></listitem>
            </itemizedlist>
        </para>
    </section>

    <section xml:id="mig-2.5">
        <title>Migrating from Jersey 2.4.1 to 2.5</title>

        <section xml:id="mig-2.5-client">
            <title>Client-side API and SPI changes</title>
            <para>
                <itemizedlist>
                    <listitem><para>
                        <emphasis>Client chunked encoding configuration behaviour has changed:</emphasis>
                    </para>
                        <para>
                            Jersey client uses chunked encoding (streaming) for serialization of the entity as a default option.
                            Before Jersey 2.5 release entity buffering has been used by default. The size of the chunk can still
                            be controlled by &jersey.client.ClientProperties.CHUNKED_ENCODING_SIZE; property, this property
                            however no longer enforces the use of chunked encoding. To control request entity buffering and
                            chunked transfer coding selection, please utilize use the new
                            &jersey.client.ClientProperties.REQUEST_ENTITY_PROCESSING; property. The behaviour of the property
                            is however not unified across the available &jersey.client.Connector; implementations and depends
                            on the connector implementation configured for the &jaxrs.client.Client; instance.
                            Default connector produced by &jersey.client.HttpUrlConnectorProvider; still uses
                            buffering as default options due to bugs in <literal>HttpURLConnection</literal>. On the other hand,
                            Jetty HTTP Client based connectors produced by &jersey.jetty.JettyConnectorProvider; do not support
                            chunked encoding at all.
                        </para><para>
                            Please note that this is not a newly introduced limitation - it's merely
                            an official acknowledgement of the fact that different connectors have different capabilities and
                            limitations - something that has always been part of the individual connector implementations, it
                            just was not publicly acknowledged.
                        </para></listitem>
                    <listitem><para>
                        New &jersey.client.ConnectorProvider; SPI has been introduced to decouple &jersey.client.Connector;
                        instantiation from &jaxrs.client.Client; instance boot-strapping. As such, the
                        <literal>connector(Connector)</literal>
                        method has been removed from &jersey.client.ClientConfig;
                        API. It has been replaced with a newly introduced
                        <literal>connectorProvider(ConnectorProvider)</literal>
                        method.
                    </para></listitem>
                    <listitem><para>
                        <literal>org.glassfish.jersey.client.HttpUrlConnector</literal>
                        has been removed from the public API.
                        &jersey.client.HttpUrlConnectorProvider; should be used to produce &jdk6.HttpUrlConnection;
                        connector instances instead.
                    </para></listitem>
                    <listitem><para>
                        <literal>ClientProperties.HTTP_URL_CONNECTION_SET_METHOD_WORKAROUND</literal>
                        property has been moved to the new &jersey.client.HttpUrlConnectorProvider;
                        has been introduced in Jersey 2.4) has been moved to the new &jersey.client.HttpUrlConnectorProvider;
                        class as this property is specific to the connector instances created by
                        &lit.jersey.client.HttpUrlConnectorProvider; only. The property has been also renamed to
                        &jersey.client.HttpUrlConnectorProvider.SET_METHOD_WORKAROUND;. The name of the property
                        remains the same - <literal>jersey.config.client.httpUrlConnection.setMethodWorkaround</literal>.
                    </para></listitem>
                    <listitem><para>
                        <literal>ClientProperties.HTTP_URL_CONNECTOR_FIX_LENGTH_STREAMING</literal>
                        property (that
                        class as this property is specific to the connector instances created by
                        &lit.jersey.client.HttpUrlConnectorProvider; only. The property has been also renamed to
                        &jersey.client.HttpUrlConnectorProvider.USE_FIXED_LENGTH_STREAMING; and the new property name
                        is <literal>jersey.config.client.httpUrlConnector.useFixedLengthStreaming</literal>.
                    </para></listitem>
                    <listitem><para>
                        <literal>org.glassfish.jersey.grizzly.connector.GrizzlyConnector</literal>
                        has been removed from the public
                        API. &jersey.grizzly.GrizzlyConnectorProvider; should be used to produce Grizzly Asynchronous HTTP Client
                        connector instances instead.
                    </para></listitem>
                    <listitem><para>
                        Public constructor has been removed from the &jersey.apache.ApacheConnector; API.
                        &jersey.apache.ApacheConnectorProvider; should be used to provide Apache HTTP Client
                        connector instances instead.
                    </para></listitem>
                    <listitem><para>
                        Public constructor has been removed from the &jersey.jetty.JettyConnector; API.
                        &jersey.jetty.JettyConnectorProvider; should be used to provide Jetty HTTP Client
                        connector instances instead.
                    </para></listitem>
                    <listitem><para>
                        Renamed property <literal>CACHING_TEMPLATES_ENABLED</literal> in &jersey.server.mvc.MustacheMvcFeature;
                        from <literal>jersey.config.server.mvc.caching.mustache.enabled</literal> to
                        <literal>jersey.config.server.mvc.caching.mustache</literal>.
                    </para></listitem>
                    <listitem><para>
                        Authentication filters <literal>org.glassfish.jersey.client.filter.HttpBasicAuthFilter</literal>
                        and <literal>org.glassfish.jersey.client.filter.HttpDigestAuthFilter</literal>
                        were deprecated and replaced by &jersey.client.HttpAuthenticationFeature;.
                    </para></listitem>
                </itemizedlist>
            </para>
        </section>
        <section xml:id="mig-2.5-other">
            <title>Other changes</title>
            <para>
                <itemizedlist>
                    <listitem><para>
                        The &jersey.server.ContainerLifecycleListener; invokes event <literal>onStartup</literal>
                        and <literal>onShutdown</literal> also when application is being started or stopped because of
                        application redeploy. The interface was marked as a Beta now.
                    </para></listitem>
                    <listitem><para>
                        The monitoring statistics method <literal>ApplicationStatistics.getDestroyTime()</literal>
                        is deprecated and returns always null. Use &jersey.server.ContainerLifecycleListener; to
                        listen on application destroy and get the destroy time.
                    </para></listitem>
                    <listitem><para>
                        <literal>org.glassfish.jersey.spi.ResponseExecutorsProvider</literal> contract has been completely
                        removed from the Jersey SPI as it was inconsistently used by Jersey runtime and we did not find
                        a suitable use case where a custom response executor would make sense. While we have no indication
                        that the removed SPI is used in the Jersey community, please do not hesitate to contact us in case
                        you think that you have a valid use case where the use of a custom response executor makes sense.
                    </para></listitem>
                    <listitem><para>
                        <literal>org.glassfish.jersey.spi.RequestsExecutorsProvider</literal> contract has been renamed to
                        &jersey.common.spi.RequestExecutorProvider;. It has been also extended with an additional
                        <literal>releaseRequestingExecutor</literal> method to address executor shutdown handling issues
                        reported in <link xlink:href='https://java.net/jira/browse/JERSEY-2205'>JERSEY-2205</link>. As such,
                        any custom implementation of the SPI is now required to implement the new method.
                    </para></listitem>
                </itemizedlist>
            </para>
        </section>

    </section>

    <section xml:id="mig-2.4.1">
        <title>Migrating from Jersey 2.4 to 2.4.1</title>

        <para>
            <itemizedlist>
                <listitem><para>
                    The unsupported <literal>ClientProperties.BUFFER_RESPONSE_ENTITY_ON_EXCEPTION</literal> property,
                    with value of <literal>jersey.config.client.bufferResponseEntityOnException</literal>, has been
                    removed from the API. Since Jersey 2.4 where
                    <link xlink:href='https://java.net/jira/browse/jersey-2157'>JERSEY-2157</link>
                    issue has been fixed, Jersey client runtime automatically buffers error response entities.
                    This behavior is automatic and there is no need to set any property.
                </para></listitem>
            </itemizedlist>
        </para>
    </section>

    <section xml:id="mig-2.4">
        <title>Migrating from Jersey 2.3 to 2.4</title>

        <para>
            <itemizedlist>
                <listitem><para>
                    All deprecated SSE &jersey.sse.InboundEvent; <literal>getData(...)</literal> methods have been removed
                    from the API. Use the new <literal>readData(...)</literal> methods have been introduced instead in
                    Jersey 2.3 for consistency with other parts of client-side JAX-RS API.
                    Access to the raw SSE event data content is provided via a &lit.jersey.sse.InboundEvent;'s
                    <literal>byte[] getRawData()</literal> method that has been too introduced in Jersey 2.3.
                </para></listitem>
                 <listitem><para>
                    All EJB and CDI integration classes have been moved into internal Jersey packages,
                    to clearly state the integration code should not be used as a public API.
                </para></listitem>
            </itemizedlist>
        </para>
    </section>

    <section xml:id="mig-2.3">
        <title>Migrating from Jersey 2.0, 2.1 or 2.2 to 2.3</title>

        <para>
            <itemizedlist>
                <listitem><para>
                    All existing SSE &jersey.sse.InboundEvent; <literal>getData(...)</literal> methods have been made
                    deprecated and new <literal>readData(...)</literal> methods have been introduced instead for consistency
                    with other parts of client-side JAX-RS API. The deprecated <literal>getData(...)</literal> methods will
                    be removed in Jersey 2.4. A new SSE &jersey.sse.InboundEvent; <literal>byte[] getRawData()</literal> method
                    has been introduced to provide access to the raw SSE event data content.
                </para></listitem>
                <listitem><para>
                    Generic &jersey.server.Broadcaster; methods for adding/removing &jersey.server.BroadcasterListener;
                    registrations have been renamed from <literal>addBroadcasterListener/removeBroadcasterListener</literal>
                    to simply <literal>add/remove</literal>.
                </para></listitem>
                <listitem><para>
                    Generic &jersey.server.Broadcaster; (and transitively, &jersey.sse.SseBroadcaster;)
                    <literal>add/remove</literal> methods - that are responsible for
                    adding/removing &jersey.server.BroadcasterListener; and &jersey.server.ChunkedOutput;
                    (or &jersey.sse.EventOutput;) registrations - no longer try to avoid duplicate registrations by comparing
                    hash code of the added/removed instance with the hash codes of already registered instances. This behavior
                    has been identified as a potential source of hard to discover bugs and was removed as such. The issue with
                    the former behavior was that hash codes as integer values provide only a very limited value space that
                    could lead to false-positive duplicate registration rejections, especially with larger number of
                    simultaneously connected SSE clients (represented by &lit.jersey.server.ChunkedOutput; or
                    &lit.jersey.sse.EventOutput; broadcaster registrations). Consequently, users who rely on the old registration
                    behavior in their application code need to adapt the code to the revised behavior of
                    &lit.jersey.server.Broadcaster; <literal>add/remove</literal> methods.
                </para></listitem>
            </itemizedlist>
        </para>

    </section>

    <section xml:id="mig-1.x">
        <title>Migrating from Jersey 1.x to 2.0</title>
        <para>
            This chapter is a migration guide for people switching from Jersey 1.x. Since many of the Jersey 1.x features
            became part of JAX-RS 2.0 standard which caused changes in the package names, we decided it is a good time
            to do a more significant incompatible refactoring, which will allow us to introduce some more interesting new
            features in the future. As the result, there are many incompatibilities between Jersey 1.x and Jersey 2.0.
            This chapter summarizes how to migrate the concepts found in Jersey 1.x to Jersey/JAX-RS 2.0 concepts.
        </para>

        <section xml:id="mig-server-api">
            <title>Server API</title>
            <para>
                Jersey 1.x contains number of proprietary server APIs. This section covers migration of application code relying
                on those APIs.
            </para>

            <section xml:id="mig-server-inject-custom-objects">
                <title>Injecting custom objects</title>
                <para>Jersey 1.x have its own internal dependency injection framework which handles injecting various parameters
                    into field or methods. It also provides a way how to register custom injection provider in Singleton or PerRequest
                    scopes. Jersey 2.x uses HK2 as dependency injection framework and users are also able to register custom classes
                    or instances to be injected in various scopes.
                </para>

                <para>Main difference in Jersey 2.x is that you don't need to create special classes or providers for this task;
                    everything should be achievable using HK2 API. Custom injectables can be registered at ResourceConfig level by adding
                    new HK2 Module or by dynamically adding binding almost anywhere using injected HK2 Services instance.
                </para>

                <para>Jersey 1.x Singleton:
                    <programlisting language="java" linenumbering="unnumbered">ResourceConfig resourceConfig = new DefaultResourceConfig();
resourceConfig.getSingletons().add(
        new SingletonTypeInjectableProvider&lt;Context, SingletonType&gt;(
                SingletonType.class, new SingletonType()) {});</programlisting>
                </para>

                <para>Jersey 1.x PerRequest:
                    <programlisting language="java" linenumbering="unnumbered">ResourceConfig resourceConfig = new DefaultResourceConfig();
resourceConfig.getSingletons().add(
        new PerRequestTypeInjectableProvider&lt;Context, PerRequestType&gt;() {
            @Override
            public Injectable&lt;PerRequestType&gt; getInjectable(ComponentContext ic, Context context) {
                //...
            }
        });</programlisting>
                </para>

                <para>Jersey 2.0 HK2 Module:
                    <programlisting language="java" linenumbering="unnumbered">public static class MyBinder extends AbstractBinder {

    @Override
    protected void configure() {
        // request scope binding
        bind(MyInjectablePerRequest.class).to(MyInjectablePerRequest.class).in(RequestScope.class);
        // singleton binding
        bind(MyInjectableSingleton.class).in(Singleton.class);
        // singleton instance binding
        bind(new MyInjectableSingleton()).to(MyInjectableSingleton.class);
    }

}

// register module to ResourceConfig (can be done also in constructor)
ResourceConfig rc = new ResourceConfig();
rc.addClasses(/* ... */);
rc.addBinders(new MyBinder());</programlisting>
                </para>

                <para>Jersey 2.0 dynamic binding:
                    <programlisting language="java" linenumbering="unnumbered">public static class MyApplication extends Application {

    @Inject
    public MyApplication(ServiceLocator serviceLocator) {
        System.out.println("Registering injectables...");

        DynamicConfiguration dc = Injections.getConfiguration(serviceLocator);

        // request scope binding
        Injections.addBinding(
        Injections.newBinder(MyInjectablePerRequest.class).to(MyInjectablePerRequest.class).in(RequestScoped.class),
                dc);

        // singleton binding
        Injections.addBinding(
                Injections.newBinder(MyInjectableSingleton.class)
                        .to(MyInjectableSingleton.class)
                        .in(Singleton.class),
                dc);

        // singleton instance binding
        Injections.addBinding(
                Injections.newBinder(new MyInjectableSingleton())
                        .to(MyInjectableSingleton.class),
                dc);

        // request scope binding with specified custom annotation
        Injections.addBinding(
                Injections.newBinder(MyInjectablePerRequest.class)
                        .to(MyInjectablePerRequest.class)
                        .qualifiedBy(new MyAnnotationImpl())
                        .in(RequestScoped.class),
                dc);

        // commits changes
        dc.commit();
    }

    @Override
    public Set&lt;Class&lt;?&gt;&gt; getClasses() {
        return ...
    }}</programlisting>
                </para>
            </section>

            <section xml:id="mig-server-reload">

                <title>ResourceConfig Reload</title>

                <para>
                    In Jersey 1, the reload functionality is based on two interfaces:
                    <orderedlist>
                        <listitem>
                            <simpara>com.sun.jersey.spi.container.ContainerListener</simpara>
                        </listitem>
                        <listitem>
                            <simpara>com.sun.jersey.spi.container.ContainerNotifier</simpara>
                        </listitem>
                    </orderedlist>

                    Containers, which support the reload functionality implement the <literal>ContainerListener</literal>
                    interface, so that once you get access to the actual container instance, you could call it's
                    <literal>onReload</literal> method and get the container re-load the config. The second interface helps you to
                    obtain the actual container instance reference. An example on how things are wired together follows.

                    <example>
                        <title>Jersey 1 reloader implementation</title>
                        <programlisting language="java" linenumbering="numbered">public class Reloader implements ContainerNotifier {
    List&lt;ContainerListener&gt; ls;

    public Reloader() {
        ls = new ArrayList&lt;ContainerListener&gt;();
    }

    public void addListener(ContainerListener l) {
        ls.add(l);
    }

    public void reload() {
        for (ContainerListener l : ls) {
            l.onReload();
        }
    }
}</programlisting>
                    </example>

                    <example>
                        <title>Jersey 1 reloader registration</title>
                        <programlisting language="java" linenumbering="numbered">Reloader reloader = new Reloader();
resourceConfig.getProperties().put(ResourceConfig.PROPERTY_CONTAINER_NOTIFIER, reloader);</programlisting>
                    </example>

                    In Jersey 2, two interfaces are involved again, but these have been re-designed.

                    <orderedlist>
                        <listitem>
                            <simpara>org.glassfish.jersey.server.spi.Container</simpara>
                        </listitem>
                        <listitem>
                            <simpara>org.glassfish.jersey.server.spi.ContainerLifecycleListener</simpara>
                        </listitem>
                    </orderedlist>

                    The <literal>Container</literal> interface introduces two <literal>reload</literal> methods, which you can call
                    to get the application re-loaded. One of these methods allows to pass in a new &lit.jersey.server.ResourceConfig;
                    instance.

                    You can register your implementation of <literal>ContainerLifecycleListener</literal> the same way as any
                    other provider (i.e. either by annotating it by &jaxrs.ext.Provider; annotation or adding it to the
                    Jersey &jersey.server.ResourceConfig; directly either using the class (using
                    <literal>ResourceConfig.addClasses()</literal>) or registering a particular instance using
                    <literal>ResourceConfig.addSingletons()</literal> method.
                </para>

                <para>
                    An example on how things work in Jersey 2 follows.

                    <example>
                        <title>Jersey 2 reloader implementation</title>
                        <programlisting language="java" linenumbering="numbered">public class Reloader implements ContainerLifecycleListener {

    Container container;

    public void reload(ResourceConfig newConfig) {
        container.reload(newConfig);
    }

    public void reload() {
        container.reload();
    }

    @Override
    public void onStartup(Container container) {
        this.container = container;
    }

    @Override
    public void onReload(Container container) {
        // ignore or do whatever you want after reload has been done
    }

    @Override
    public void onShutdown(Container container) {
        // ignore or do something after the container has been shutdown
    }
}</programlisting>
                    </example>
                    <example>
                        <title>Jersey 2 reloader registration</title>
                        <programlisting language="java" linenumbering="numbered">Reloader reloader = new Reloader();
resourceConfig.addSingletons(reloader);
                        </programlisting>
                    </example>
                </para>
            </section>

            <section xml:id="mig-server-provider-ordering">
                <title>MessageBodyReaders and MessageBodyWriters ordering</title>
                <para>JAX-RS 2.0 defines new order of MessageBodyWorkers - whole set is sorted by declaration distance,
                    media type and source (custom providers having higher priority than default ones provided by Jersey).
                    JAX-RS 1.x ordering can still be forced by setting parameter
                    <literal>MessageProperties.LEGACY_WORKERS_ORDERING</literal>
                    (<literal>"jersey.config.workers.legacyOrdering"</literal>) to &lit.true; in &lit.jersey.server.ResourceConfig;
                    or &lit.jersey.client.ClientConfig; properties.
                </para>
            </section>
        </section>

        <section xml:id="mig-client-api">
            <title>Migrating Jersey Client API</title>

            <para>
                JAX-RS 2.0 provides functionality that is equivalent to the Jersey 1.x proprietary client API. Here is a rough
                mapping between the Jersey 1.x and JAX-RS 2.0 Client API classes:
            </para>
            <table frame='all'>
                <title>Mapping of Jersey 1.x to JAX-RS 2.0 client classes</title>
                <tgroup cols='3' align='left' colsep='1' rowsep='1'>
                    <colspec colname='c1' colwidth="0*" />
                    <colspec colname='c2' colwidth="0*" />
                    <colspec colname='c3' colwidth="1*" />
                    <thead>
                        <row>
                            <entry>Jersey 1.x Class</entry>
                            <entry>JAX-RS 2.0 Class</entry>
                            <entry>Notes</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <link xlink:href="http://jersey.java.net/nonav/apidocs/1.17/jersey/com/sun/jersey/api/client/Client.html">com.sun.jersey.api.client.Client</link>
                            </entry>
                            <entry>
                                &jaxrs.client.ClientBuilder;
                            </entry>
                            <entry>For the static factory methods and constructors.</entry>
                        </row>
                        <row>
                            <entry></entry>
                            <entry>
                                &jaxrs.client.Client;
                            </entry>
                            <entry>For the instance methods.</entry>
                        </row>
                        <row>
                            <entry>
                                <link xlink:href="http://jersey.java.net/nonav/apidocs/1.17/jersey/com/sun/jersey/api/client/WebResource.html">com.sun.jersey.api.client.WebResource</link>
                            </entry>
                            <entry>
                                &jaxrs.client.WebTarget;
                            </entry>
                            <entry></entry>
                        </row>
                        <row>
                            <entry>
                                <link xlink:href="http://jersey.java.net/nonav/apidocs/1.17/jersey/com/sun/jersey/api/client/AsyncWebResource.html">com.sun.jersey.api.client.AsyncWebResource</link>
                            </entry>
                            <entry>
                                &jaxrs.client.WebTarget;
                            </entry>
                            <entry>You can access async versions of the async methods by calling
                                <literal >WebTarget.request().async()</literal>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para>The following sub-sections show code examples.</para>

            <section xml:id="mig-client-simple-request">
                <title>Making a simple client request</title>
                <para>
                    Jersey 1.x way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = Client.create();
WebResource webResource = client.resource(restURL).path("myresource/{param}");
String result = webResource.pathParam("param", "value").get(String.class);</programlisting>
                </para>

                <para>
                    JAX-RS 2.0 way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = ClientBuilder.newClient();
WebTarget target = client.target(restURL).path("myresource/{param}");
String result = target.pathParam("param", "value").get(String.class);</programlisting>
                </para>
            </section>

            <section xml:id="mig-client-filter-register">
                <title>Registering filters</title>

                <para>
                    Jersey 1.x way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = Client.create();
WebResource webResource = client.resource(restURL);
webResource.addFilter(new HTTPBasicAuthFilter(username, password));</programlisting>
                </para>

                <para>
                    JAX-RS 2.0 way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = ClientBuilder.newClient();
WebTarget target = client.target(restURL);
target.register(new HttpBasicAuthFilter(username, password));</programlisting>
                </para>
            </section>

            <section xml:id="mig-client-accept-header">
                <title>Setting "Accept" header</title>

                <para>
                    Jersey 1.x way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = Client.create();
WebResource webResource = client.resource(restURL).accept("text/plain");
ClientResponse response = webResource.get(ClientResponse.class);</programlisting>
                </para>

                <para>
                    JAX-RS 2.0 way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = ClientBuilder.newClient();
WebTarget target = client.target(restURL);
Response response = target.request("text/plain").get();</programlisting>
                </para>
            </section>

            <section xml:id="mig-client-add-entity">
                <title>Attaching entity to request</title>
                <para>
                    Jersey 1.x way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = Client.create();
WebResource webResource = client.resource(restURL);
ClientResponse response = webResource.post(ClientResponse.class, "payload");</programlisting>
                </para>

                <para>
                    JAX-RS 2.0 way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = ClientBuilder.newClient();
WebTarget target = client.target(restURL);
Response response = target.request().post(Entity.text("payload"));</programlisting>
                </para>
            </section>

            <section xml:id="mig-client-ssl">
                <title>Setting SSLContext and/or HostnameVerifier</title>

                <para>
                    Jersey 1.x way:

                    <programlisting language="java" linenumbering="unnumbered">HTTPSProperties prop = new HTTPSProperties(hostnameVerifier, sslContext);
DefaultClientConfig dcc = new DefaultClientConfig();
dcc.getProperties().put(HTTPSProperties.PROPERTY_HTTPS_PROPERTIES, prop);
Client client = Client.create(dcc);</programlisting>
                </para>

                <para>
                    Jersey 2.0 way:

                    <programlisting language="java" linenumbering="unnumbered">Client client = ClientBuilder.newBuilder()
        .sslContext(sslContext)
        .hostnameVerifier(hostnameVerifier)
        .build();
                    </programlisting>
                </para>
            </section>
        </section>
    </section>
</chapter>
